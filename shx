#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX_STACK_SIZE 100

typedef struct {
    char data[MAX_STACK_SIZE];
    int top;
} Stack;

void initStack(Stack *stack) {
    stack->top = -1;
}

void push(Stack *stack, char c) {
    if (stack->top < MAX_STACK_SIZE - 1) {
        stack->data[++stack->top] = c;
    }
}

char pop(Stack *stack) {
    if (stack->top >= 0) {
        return stack->data[stack->top--];
    }
    return '\0';
}

char peek(Stack *stack) {
    if (stack->top >= 0) {
        return stack->data[stack->top];
    }
    return '\0';
}

void displayIndentedJSON(FILE *file, int compressed);
void displayIndentedJSON_file(FILE *file, int compressed, FILE *outputFile);
int checkJSONSyntax(FILE *file);

int main() {
    char filename[100];
    char outputFilename[100];
    int choice;

    printf("Enter the path to the JSON file: ");
    scanf("%s", filename);

    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        printf("Error opening file.\n");
        return 1;
    }

    printf("1. to screen 2.to file:");
    scanf("%d", &choice);

    int syntaxCheckResult = checkJSONSyntax(file);

    if (syntaxCheckResult == 0) {
        printf("JSON syntax is valid.\n");
        rewind(file);
        if(choice == 1){
            displayIndentedJSON(file, 0);
        }else{
            printf("Enter the path for the output file: ");
            scanf("%s", outputFilename);
            FILE *outputFile = fopen(outputFilename, "w");
            if (outputFile == NULL) {
                printf("Error opening output file.\n");
                fclose(file);
                return 1;
            }
            printf("1. save in tree 2.save in compressed:");
            scanf("%d", &choice);
            if(choice == 1){
                displayIndentedJSON_file(file, 0, outputFile);
            }else{
                displayIndentedJSON_file(file, 1, outputFile);
            }
        }
    } else {
        int line = 1;
        int col = 1;
        fseek(file, 0, SEEK_SET);
        while (--syntaxCheckResult > 0) {
            char ch = fgetc(file);
            if (ch == '\n') {
                line++;
                col = 1;
            } else {
                col++;
            }
        }
        printf("JSON syntax error at line %d, column %d.\n", line, col);
    }

    fclose(file);

    return 0;
}

int checkJSONSyntax(FILE *file) {
    char c;
    Stack stack;
    initStack(&stack);
    int position = 0;

    while ((c = fgetc(file)) != EOF) {
        position++;

        if (c == '{' || c == '[') {
            push(&stack, c);
        } else if (c == '}' || c == ']') {
            if (stack.top >= 0 && ((c == '}' && peek(&stack) == '{') || (c == ']' && peek(&stack) == '['))) {
                pop(&stack);
            } else {
                return position;
            }
        }
    }

    if (stack.top != -1) {
        return position;
    }

    return 0;
}

void displayIndentedJSON(FILE *file, int compressed) {
    char c;
    Stack stack;
    initStack(&stack);
    int indentLevel = 0;

    while ((c = fgetc(file)) != EOF) {
        if (c == '{' || c == '[') {
            if (!compressed) {
                printf("%c\n", c);
                indentLevel++;
                for (int i = 0; i < indentLevel; i++) {
                    printf("    ");
                }
            }
        } else if (c == '}' || c == ']') {
            indentLevel--;
            if (!compressed) {
                printf("\n");
                for (int i = 0; i < indentLevel; i++) {
                    printf("    ");
                }
                printf("%c", c);
            }
        } else if (c == ',') {
            if (!compressed) {
                printf(",\n");
                for (int i = 0; i < indentLevel; i++) {
                    printf("    ");
                }
            }
        } else if (!isspace(c)) {
            printf("%c", c);
        }
    }

    printf("\n");
}

void displayIndentedJSON_file(FILE *file, int compressed, FILE *outputFile) {
    char c;
    Stack stack;
    initStack(&stack);
    int indentLevel = 0;

    while ((c = fgetc(file)) != EOF) {
        if (c == '{' || c == '[') {
            if (!compressed) {
                fprintf(outputFile, "%c\n", c);
                indentLevel++;
                for (int i = 0; i < indentLevel; i++) {
                    fprintf(outputFile, "    ");
                }
            } else {
                fprintf(outputFile, "%c", c);
            }
        } else if (c == '}' || c == ']') {
            indentLevel--;
            if (!compressed) {
                fprintf(outputFile, "\n");
                for (int i = 0; i < indentLevel; i++) {
                    fprintf(outputFile, "    ");
                }
                fprintf(outputFile, "%c", c);
            } else {
                fprintf(outputFile, "%c", c);
            }
        } else if (c == ',' && !compressed) {
            fprintf(outputFile, ",\n");
            for (int i = 0; i < indentLevel; i++) {
                fprintf(outputFile, "    ");
            }
        } else if (!isspace(c)) {
            fprintf(outputFile, "%c", c);
        }
    }

    fprintf(outputFile, "\n");
}
