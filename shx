#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_STACK_SIZE 1000
#define MAX_JSON_LENGTH 100000

typedef enum {
    JSON_NULL,
    JSON_FALSE,
    JSON_TRUE,
    JSON_NUMBER,
    JSON_STRING,
    JSON_ARRAY,
    JSON_OBJECT
} json_type;

typedef struct {
    json_type type;
    union {
        double number;
        char* string;
        struct {
            void* elements;
            size_t size, capacity;
        } array;
        struct {
            char** keys;
            void** values;
            size_t size, capacity;
        } object;
    } u;
} json_value;

typedef struct {
    const char* json;
    size_t pos;
} json_context;

static void* json_context_push(json_context* c, size_t size) {
    void* ret;
    if (c->pos + size >= MAX_STACK_SIZE)
        exit(1);
    ret = (void*)&c->json[c->pos];
    c->pos += size;
    return ret;
}

static void* json_context_pop(json_context* c, size_t size) {
    c->pos -= size;
    return (void*)&c->json[c->pos];
}

static void json_parse_whitespace(json_context* c) {
    const char* p = c->json;
    while (*p == ' ' || *p == '\t' || *p == '\n' || *p == '\r')
        ++p;
    c->json = p;
}

static int json_parse_literal(json_context* c, json_value* v, const char* literal, json_type type) {
    size_t i;
    EXPECT(c, literal[0]);
    for (i = 0; literal[i + 1]; ++i)
        if (c->json[i] != literal[i + 1])
            return 0;
    c->json += i;
    v->type = type;
    return 1;
}

static int json_parse_number(json_context* c, json_value* v) {
    const char* p = c->json;
    if (*p == '-')
        ++p;
    if (*p == '0')
        ++p;
    else {
        if (!isdigit(*p))
            return 0;
        while (isdigit(*++p))
            ;
    }
    if (*p == '.') {
        if (!isdigit(*++p))
            return 0;
        while (isdigit(*++p))
            ;
    }
    if (*p == 'e' || *p == 'E') {
        ++p;
        if (*p == '+' || *p == '-')
            ++p;
        if (!isdigit(*p))
            return 0;
        while (isdigit(*++p))
            ;
    }
    errno = 0;
    v->u.number = strtod(c->json, NULL);
    if (errno == ERANGE && (v->u.number == HUGE_VAL || v->u.number == -HUGE_VAL))
        return 0;
    v->type = JSON_NUMBER;
    c->json = p;
    return 1;
}

static const char* json_parse_hex4(const char* p, unsigned* u) {
    size_t i;
    *u = 0;
    for (i = 0; i < 4; ++i) {
        char ch = *p++;
        *u <<= 4;
        if (ch >= '0' && ch <= '9')
            *u |= ch - '0';
        else if (ch >= 'A' && ch <= 'F')
            *u |= ch - ('A' - 10);
        else if (ch >= 'a' && ch <= 'f')
            *u |= ch - ('a' - 10);
        else
            return NULL;
    }
    return p;
}

static void json_encode_utf8(json_context* c, unsigned u) {
    if (u <= 0x7F)
        PUTC(c, u & 0xFF);
    else if (u <= 0x7FF) {
        PUTC(c, 0xC0 | ((u >> 6) & 0xFF));
        PUTC(c, 0x80 | (u & 0x3F));
    }
    else if (u <= 0xFFFF) {
        PUTC(c, 0xE0 | ((u >> 12) & 0xFF));
        PUTC(c, 0x80 | ((u >> 6) & 0x3F));
        PUTC(c, 0x80 | (u & 0x3F));
    }
    else {
        PUTC(c, 0xF0 | ((u >> 18) & 0xFF));
        PUTC(c, 0x80 | ((u >> 12) & 0x3F));
        PUTC(c, 0x80 | ((u >> 6) & 0x3F));
        PUTC(c, 0x80 | (u & 0x3F));
    }
}

static int json_parse_string_raw(json_context* c, char** str, size_t* len) {
    size_t head = c->pos;
    const char* p;
    unsigned u, u2;
    EXPECT(c, '\"');
    p = c->json;
    while (1) {
        char ch = *p++;
        switch (ch) {
        case '\"':
            *len = c->pos - head;
            *str = (char*)json_context_pop(c, *len + 1);
            memcpy(*str, &c->json[head], *len);
            (*str)[*len] = '\0';
            c->json = p;
            return 1;
        case '\\':
            switch (*p++) {
            case '\"': PUTC(c, '\"'); break;
            case '\\': PUTC(c, '\\'); break;
            case '/': PUTC(c, '/'); break;
            case 'b': PUTC(c, '\b'); break;
            case 'f': PUTC(c, '\f'); break;
            case 'n': PUTC(c, '\n'); break;
            case 'r': PUTC(c, '\r'); break;
            case 't': PUTC(c, '\t'); break;
            case 'u':
                if (!(p = json_parse_hex4(p, &u)))
                    STRING_ERROR(JSON_PARSE_INVALID_UNICODE_HEX);
                if (u >= 0xD800 && u <= 0xDBFF) {
                    if (*p++ != '\\')
                        STRING_ERROR(JSON_PARSE_INVALID_UNICODE_SURROGATE);
                    if (*p++ != 'u')
                        STRING_ERROR(JSON_PARSE_INVALID_UNICODE_SURROGATE);
                    if (!(p = json_parse_hex4(p, &u2)))
                        STRING_ERROR(JSON_PARSE_INVALID_UNICODE_HEX);
                    if (u2 < 0xDC00 || u2 > 0xDFFF)
                        STRING_ERROR(JSON_PARSE_INVALID_UNICODE_SURROGATE);
                    u = (((u - 0xD800) << 10) | (u2 - 0xDC00)) + 0x10000;
                }
                json_encode_utf8(c, u);
                break;
            default:
                STRING_ERROR(JSON_PARSE_INVALID_STRING_ESCAPE);
            }
            break;
        case '\0':
            STRING_ERROR(JSON_PARSE_MISS_QUOTATION_MARK);
        default:
            if ((unsigned char)ch < 0x20)
                STRING_ERROR(JSON_PARSE_INVALID_STRING_CHAR);
            PUTC(c, ch);
        }
    }
}

static int json_parse_string(json_context* c, json_value* v) {
    int ret;
    char* s;
    size_t len;
    if ((ret = json_parse_string_raw(c, &s, &len))) {
        json_set_string(v, s, len);
    }
    return ret;
}

static int json_parse_value(json_context* c, json_value* v);

static int json_parse_array(json_context* c, json_value* v) {
    size_t i, size = 0;
    int ret;
    EXPECT(c, '[');
    json_parse_whitespace(c);
    if (*c->json == ']') {
        c->json++;
        v->type = JSON_ARRAY;
        v->u.array.size = 0;
        v->u.array.capacity = 0;
        v->u.array.elements = NULL;
        return 1;
    }
    while (1) {
        json_value e;
        json_init(&e);
        if ((ret = json_parse_value(c, &e)) != 1)
            break;
        memcpy(json_context_push(c, sizeof(json_value)), &e, sizeof(json_value));
        ++size;
        json_parse_whitespace(c);
        if (*c->json == ',') {
            ++c->json;
            json_parse_whitespace(c);
        }
        else if (*c->json == ']') {
            c->json++;
            v->type = JSON_ARRAY;
            v->u.array.size = size;
            v->u.array.capacity = size;
            size *= sizeof(json_value);
            memcpy(v->u.array.elements = (json_value*)malloc(size), json_context_pop(c, size), size);
            return 1;
        }
        else {
            ret = 0;
            break;
        }
    }
    for (i = 0; i < size; ++i)
        json_free((json_value*)json_context_pop(c, sizeof(json_value)));
    return ret;
}

static int json_parse_object(json_context* c, json_value* v) {
    size_t i, size;
    json_member m;
    int ret;
    EXPECT(c, '{');
    json_parse_whitespace(c);
    if (*c->json == '}') {
        c->json++;
        v->type = JSON_OBJECT;
        v->u.object.size = 0;
        v->u.object.capacity = 0;
        v->u.object.keys = NULL;
        v->u.object.values = NULL;
        return 1;
    }
    m.k = NULL;
    size = 0;
    while (1) {
        char* str;
        json_init(&m.v);
        if (*c->json != '\"') {
            ret = 0;
            break;
        }
        if ((ret = json_parse_string_raw(c, &str, &m.klen)))
            memcpy(m.k = (char*)malloc(m.klen + 1), str, m.klen + 1);
        else
            break;
        json_parse_whitespace(c);
        if (*c->json++ != ':') {
            ret = 0;
            break;
        }
        json_parse_whitespace(c);
        if ((ret = json_parse_value(c, &m.v))) {
            memcpy(json_context_push(c, sizeof(json_member)), &m, sizeof(json_member));
            ++size;
            m.k = NULL;
        }
        else
            break;
        json_parse_whitespace(c);
        if (*c->json == ',') {
            ++c->json;
            json_parse_whitespace(c);
        }
        else if (*c->json == '}') {
            size_t s = sizeof(json_member) * size;
            c->json++;
            v->type = JSON_OBJECT;
            v->u.object.size = size;
            v->u.object.capacity = size;
            memcpy(v->u.object.members = (json_member*)malloc(s), json_context_pop(c, s), s);
            return 1;
        }
        else {
            ret = 0;
            break;
        }
    }
    free(m.k);
    for (i = 0; i < size; ++i) {
        json_member* m = (json_member*)json_context_pop(c, sizeof(json_member));
        free(m->k);
        json_free(&m->v);
    }
    v->type = JSON_NULL;
    return ret;
}

static int json_parse_value(json_context* c, json_value* v) {
    switch (*c->json) {
    case 'n':  return json_parse_literal(c, v, "null", JSON_NULL);
    case 'f':  return json_parse_literal(c, v, "false", JSON_FALSE);
    case 't':  return json_parse_literal(c, v, "true", JSON_TRUE);
    case '\"': return json_parse_string(c, v);
    case '[':  return json_parse_array(c, v);
    case '{':  return json_parse_object(c, v);
    default:   return json_parse_number(c, v);
    }
}

int json_parse(json_value* v, const char* json) {
    json_context c;
    int ret;
    assert(v != NULL);
    c.json = json;
    c.pos = 0;
    json_init(v);
    json_parse_whitespace(&c);
    if ((ret = json_parse_value(&c, v)) == 1) {
        json_parse_whitespace(&c);
        if (*c.json != '\0') {
            v->type = JSON_NULL;
            ret = 0;
        }
    }
    return ret;
}

static void json_stringify_string(json_context* c, const char* str, size_t len) {
    static const char hex_digits[] = "0123456789ABCDEF";
    size_t i, size;
    char* head, * p;
    assert(str != NULL);
    p = head = (char*)json_context_push(c, size = len * 6 + 2);
    *p++ = '\"';
    for (i = 0; i < len; ++i) {
        unsigned char ch = (unsigned char)str[i];
        switch (ch) {
        case '\"': *p++ = '\\'; *p++ = '\"'; break;
        case '\\': *p++ = '\\'; *p++ = '\\'; break;
        case '\b': *p++ = '\\'; *
